pipeline {
  agent { label 'linux-slave' }
  environment {
    DOCKER_REGISTRY_NAME        = credentials('DOCKER_REGISTRY_NAME')
    DOCKER_REGISTRY_USERNAME    = credentials('DOCKER_REGISTRY_USERNAME')
    DOCKER_REGISTRY_PASSWORD    = credentials('DOCKER_REGISTRY_PASSWORD')
  }

  stages {
    stage ('Integration Code') {
      parallel {
        stage ('Code Quality') {
          stages {
            stage('Code Quality Check') {
              agent {
                docker {
                  image 'gradle:jdk8-alpine'
                  label 'linux-slave'
                }
              }

              steps {
                script{
                  def scannerHome = tool 'sonar_scanner';
                  withSonarQubeEnv('sonar') {
                      sh "${scannerHome}/bin/sonar-scanner \
                          -Dsonar.projectKey=color-app \
                          -Dsonar.projectName=color-app \
                          -Dsonar.host.url=${SONAR_HOST_URL}"
                  }
                }
              }
            }
            stage("Quality gate") {
              steps {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        }

        stage ('Code Testing') {
          stages {
            stage ('Install Dependencies') {
              tools {
                nodejs 'nodejs 8.9.4'
              }
              steps {
                sh '''
                  echo "Installing..."
                  npm install
                  echo "Install dependencies successfully."
                  ls -al
                '''
              }
            }
            stage ('Test') {
              tools {
                nodejs 'nodejs 8.9.4'
              }
              steps {
                sh 'echo "Run unit test..."'
                sh 'npm test'
                sh 'echo "Run unit test successfully."'
                sh 'ls -al'
              }
            }
          }
        }
      }
    }

    stage ('Build') {
      when {
        anyOf {
            branch 'develop'
            branch 'release'
            tag pattern: "^v(\\d+(?:\\.\\d+)*)\$", comparator: "REGEXP"
        }
      }
      steps {
        nodejs(nodeJSInstallationName: 'nodejs 8.9.4') {
          sh 'echo "Build application..."'
          sh 'npm run build'
          sh 'echo "Build application successfully."'
          sh 'ls -al'
        }
        script {
          stash includes: 'build/', name: 'build'
        }
      }
    }

    stage ('Create docker images - DEV/STG') {
      when {
        anyOf {
          branch 'develop'
          branch 'release'
        }
      }
      steps {
        script {
          unstash 'build'
        }
        sh '''
          ls -al
          echo "Starting to build docker image for dev env"
          docker build -t "${DOCKER_REGISTRY_NAME}/pick-color:${BRANCH_NAME}-${BUILD_NUMBER}" -f docker/Dockerfile.no_build .
        '''
        // Push image to hub.docker.com
        // echo ${DOCKER_REGISTRY_PASSWORD} | docker login -u ${DOCKER_REGISTRY_USERNAME} --password-stdin  
        sh '''
          docker login -u ${DOCKER_REGISTRY_USERNAME} --password ${DOCKER_REGISTRY_PASSWORD}
          docker push "${DOCKER_REGISTRY_NAME}/pick-color:${BRANCH_NAME}-${BUILD_NUMBER}"
        '''
      }
    }

    stage ('Deploy app - DEV') {
      when {
        branch 'develop'
      }
      steps {
        sh '''
          docker stop color-app-dev || true && docker rm color-app-dev || true
          docker run -p 30080:80 --restart always -d --name color-app-dev ${DOCKER_REGISTRY_NAME}/pick-color:${BRANCH_NAME}-${BUILD_NUMBER} 
        '''
      }
    }

    stage ('Deploy app - STG') {
      when {
        branch 'release'
      }
      steps {
        sh '''
          docker stop color-app-stg || true && docker rm color-app-stg || true
          docker run -p 30090:80 --restart always -d --name color-app-stg ${DOCKER_REGISTRY_NAME}/pick-color:${BRANCH_NAME}-${BUILD_NUMBER} 
        '''
      }
    }
    
    stage ('Create docker images - PRD') {
      when { 
        tag pattern: "^v(\\d+(?:\\.\\d+)*)\$", comparator: "REGEXP"
      }
      steps {
        script {
          unstash 'build'
        }

        // Create image step
        sh '''
          ls -al
          echo "Starting to build docker image, prepare for release"
          docker build -t "${DOCKER_REGISTRY_NAME}/pick-color:${TAG_NAME}" -f docker/Dockerfile.no_build .
        '''
        // Push image step
        sh '''
          docker login -u ${DOCKER_REGISTRY_USERNAME} --password ${DOCKER_REGISTRY_PASSWORD}
          docker push "${DOCKER_REGISTRY_NAME}/pick-color:${TAG_NAME}"
        '''
      }
    }

    stage ('Deploy app - PRD') {
      when { 
        beforeInput true
        tag pattern: "^v(\\d+(?:\\.\\d+)*)\$", comparator: "REGEXP"
      }
      input {
        message 'Approve to deploy PRD?'
        ok "Done"
        // parameters {
        //   booleanParam(name: 'APPROVED', defaultValue: false, description: 'Are you approve to deploy Application on PRD environment?')
        // }
      }
      steps {
        sh '''
          docker stop color-app-prd || true && docker rm color-app-prd || true
          docker run -p 30800:80 --restart always -d --name color-app-prd ${DOCKER_REGISTRY_NAME}/pick-color:${TAG_NAME}
        '''
      }
    }
  }
}