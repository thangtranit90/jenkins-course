pipeline {
  agent { label 'linux-slave' }
  environment {
    DOCKER_REGISTRY_NAME        = credentials('DOCKER_REGISTRY_NAME')
    DOCKER_REGISTRY_USERNAME    = credentials('DOCKER_REGISTRY_USERNAME')
    DOCKER_REGISTRY_PASSWORD    = credentials('DOCKER_REGISTRY_PASSWORD')
  }
  stages {

    stage ('Install dependencies') {
      tools {
        nodejs 'nodejs 8.9.4'
      }
      steps {
        sh '''
          echo "Installing..."
          npm install
          echo "Install dependencies successfully."
          ls -al
        '''
      }
    }
    
    stage ('Test') {
      tools {
        nodejs 'nodejs 8.9.4'
      }
      steps {
        sh 'echo "Run unit test..."'
        sh 'npm test'
        sh 'echo "Run unit test successfully."'
        sh 'ls -al'
      }
    }

    stage ('Build') {
      when {
        anyOf {
            branch 'develop'
            branch 'release'
        }
      }
      steps {
        nodejs(nodeJSInstallationName: 'nodejs 8.9.4') {
          sh 'echo "Build application..."'
          sh 'npm run build'
          sh 'echo "Build application successfully."'
          sh 'ls -al'
        }
        script {
          stash includes: 'build/', name: 'build'
        }
      }
    }

    stage ('Create docker images dev') {
      when {
        branch 'develop'
      }
      steps {
        script {
          unstash 'build'
        }
        sh '''
          ls -al
          echo "Starting to build docker image for dev env"
          docker build -t "${DOCKER_REGISTRY_NAME}/pick-color:dev-${BUILD_NUMBER}" -f docker/Dockerfile.no_build .
        '''
        // Push image to hub.docker.com
        sh '''
          echo ${DOCKER_REGISTRY_PASSWORD} | docker login -u ${DOCKER_REGISTRY_USERNAME} --password-stdin  
          docker push "${DOCKER_REGISTRY_NAME}/pick-color:dev-${BUILD_NUMBER}"
        '''

      }
    }

    stage ('Create docker images release') {
      when {
        branch 'release'
      }
      input {
        message "Enter release version..."
        ok "Done"
        parameters {
          string(name: "IMAGE_TAG", defaultValue: "v0.0.0")
        }
      }
      steps {
        script {
          unstash 'build'
        }
        sh '''
          ls -al
          echo "Starting to build docker image, prepare for release"
          docker build -t "${DOCKER_REGISTRY_NAME}/pick-color:${IMAGE_TAG}" -f docker/Dockerfile.no_build .
        '''
        // Push image to hub.docker.com
        sh '''
          echo ${DOCKER_REGISTRY_PASSWORD} | docker login -u ${DOCKER_REGISTRY_USERNAME} --password-stdin  
          docker push "${DOCKER_REGISTRY_NAME}/pick-color:${IMAGE_TAG}"
        '''
      }
    }
  }
}
